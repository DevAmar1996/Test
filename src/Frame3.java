
import java.awt.Color;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;

public class Frame3 extends javax.swing.JFrame implements Runnable {

    int play;
    public InputStreamReader isr;
    public InputStream is;
    public BufferedReader br;
    public OutputStream os;
    public OutputStreamWriter osw;
    public PrintWriter bw;
    public Socket socket;
    public boolean quit = false;
    public String name;
    public int numOfPlayers;
    public int stars;
    public String level;
    public Thread th;
    public int fileNum;
    private int nums[] = new int[4];//for easy level
    private int nums2[] = new int[6]; //for average leve
    private int nums3[] = new int[8]; //for avanced level
    String winners[];

    public Frame3(String name, int numOfPlayers, int stars, String level, String[] winners) {
        initComponents();
        getContentPane().setBackground(new Color(234, 240, 237));
        jLabel15.setText("Welcome " + name + " (" + stars + ") ");
        this.connectToServer();
        th = new Thread(this);
        th.start();
        bw.println("waiting:" + level);
        bw.flush();
        this.name = name;
        this.numOfPlayers = numOfPlayers;
        this.stars = stars;
        this.level = level;
        this.winners = winners;
        this.updateUI();
    }

  

    public void connectToServer() {
        try {
            InetAddress address = InetAddress.getByName(ServerConnection.serverIP);
            socket = new Socket(address, 3333);
            initialReadAndWrite();
        } catch (UnknownHostException ex) {
            Logger.getLogger(Frame1.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Frame1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void initialReadAndWrite() {
        try {
            is = socket.getInputStream();
            isr = new InputStreamReader(is);
            br = new BufferedReader(isr);
            os = socket.getOutputStream();
            osw = new OutputStreamWriter(os);
            bw = new PrintWriter(osw);
        } catch (IOException ex) {
            Logger.getLogger(Frame1.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateUI() {
        if (numOfPlayers == 1) {
            player1.setVisible(true);
            player2.setVisible(false);
            player3.setVisible(false);
            jButton1.setVisible(false);
            goPlay.setVisible(false);
        } else if (numOfPlayers == 2) {
            player3.setVisible(false);
            player2.setVisible(true);
            player1.setVisible(true);
            jButton1.setVisible(false);
            goPlay.setVisible(false);
        } else {
            player3.setVisible(true);
            player2.setVisible(true);
            player1.setVisible(true);
            jButton1.setVisible(true);
            goPlay.setVisible(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        player2 = new javax.swing.JLabel();
        player3 = new javax.swing.JLabel();
        player1 = new javax.swing.JLabel();
        name1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        goPlay = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        title = new javax.swing.JLabel();
        name3 = new javax.swing.JLabel();
        name2 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture3.PNG"))); // NOI18N
        jLabel5.setText("jLabel1");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/exit.png"))); // NOI18N
        jLabel6.setText("jLabel2");

        jLabel8.setText("Welcome");

        jLabel9.setText("Welcome");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(580, 415));

        player2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MAn.PNG"))); // NOI18N
        player2.setText("jLabel3");

        player3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MAn.PNG"))); // NOI18N
        player3.setText("jLabel3");

        player1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/MAn.PNG"))); // NOI18N
        player1.setText("jLabel3");

        name1.setFont(new java.awt.Font("Hannotate TC", 0, 18)); // NOI18N
        name1.setForeground(new java.awt.Color(244, 75, 98));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Capture3.PNG"))); // NOI18N

        jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel15.setText("Welcome");

        goPlay.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        goPlay.setForeground(new java.awt.Color(53, 172, 149));
        goPlay.setText("You are all connected .. LET'S PLAY ");

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton1.setText("Let's Play!");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        title.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        title.setForeground(new java.awt.Color(53, 172, 149));
        title.setText("Wait for your friends to be connected!");

        name3.setFont(new java.awt.Font("Hannotate TC", 0, 18)); // NOI18N
        name3.setForeground(new java.awt.Color(244, 75, 98));

        name2.setFont(new java.awt.Font("Hannotate TC", 0, 18)); // NOI18N
        name2.setForeground(new java.awt.Color(244, 75, 98));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/exit.png"))); // NOI18N
        jLabel2.setText("jLabel2");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(title))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(player1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 105, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(goPlay)
                                .addGap(47, 47, 47)
                                .addComponent(jButton1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(name1, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(86, 86, 86)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(name2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(player2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(64, 64, 64)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(name3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(player3, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(116, 116, 116))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel15))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(title)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(player3)
                            .addComponent(player2)
                            .addComponent(player1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(name3, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(name1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(name2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goPlay))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        JOptionPane.showMessageDialog(null, "are you sure you want to exit", "Error", JOptionPane.ERROR_MESSAGE);
        bw.println("Quit: " + name);
        bw.flush();
        quit = true;
        System.exit(0);        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel2MouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel goPlay;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel name1;
    private javax.swing.JLabel name2;
    private javax.swing.JLabel name3;
    private javax.swing.JLabel player1;
    private javax.swing.JLabel player2;
    private javax.swing.JLabel player3;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        while (!quit) {
            try {
                //read message from server
                String message = br.readLine();
                if (message != null) {
                    if (message.contains("offline")) {
                        this.numOfPlayers = Integer.parseInt(message.split(":")[2]);
                    }
                    if (message.contains("wait")) {
                        numOfPlayers = Integer.parseInt(message.split(":")[1]);
                        String[] ms = message.split(":"); //break message into pices to get the name of the player 
                        //read the name pf the player that server send 
                        this.updateUI();
                        if (numOfPlayers == 1) {
                            name1.setText(ms[2]);
                        }
                        if (numOfPlayers == 2) {
                            name1.setText(ms[2]);
                            name2.setText(ms[3]);
                        }

                    }
                    if (message.contains("go")) {
                        numOfPlayers = 3;
                        String[] ms = message.split(":"); //break message into pices to get the name of the player 
                        fileNum = Integer.parseInt(ms[1]);
                        name1.setText(ms[2]);
                        name2.setText(ms[3]);
                        name3.setText(ms[4]);
                        this.updateUI();
                        String names[] = {ms[2], ms[3], ms[4]};
                        int k = -1 ;
                        if(ms.length == 9){
                        for (int i = 4; i < 8; i++) {
                            nums[++k] = Integer.parseInt(ms[i + 1]);
                        }
                        }else if (ms.length == 11){
                            for (int i = 4; i < 10; i++) {
                            nums2[++k] = Integer.parseInt(ms[i + 1]);
                        }
                        }else{
                            for (int i = 4; i < 12; i++) {
                            nums3[++k] = Integer.parseInt(ms[i + 1]);
                            }
                        }
                        Thread.sleep(1000); //sleep for 1 second to allow player see all the player who play with him

                        //now he can go to the play interface
                        try {
                            this.setVisible(false);
                            //to make the while stop working
                            quit = true;
                            //close the connection on this frame 
                            socket.close();
                            //check the level and then go to appropriate frame
                            if (level.equals("Easy")) {
                                new EasyGame(name, numOfPlayers, stars, level, fileNum, names,nums,winners).setVisible(true);
                            } else if (level.equals("Average")) {
                                new AverageGame(name, numOfPlayers, stars, level, fileNum,names,nums2,winners).setVisible(true);
                            } else {
                                new AdvancedGame(name, numOfPlayers, stars, level, fileNum,names,nums3,winners).setVisible(true);

                            }
                        } catch (IOException ex) {
                            Logger.getLogger(Frame3.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                }
            } catch (IOException ex) {
                Logger.getLogger(Frame1.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(Frame3.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
